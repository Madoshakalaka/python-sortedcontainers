from typing import Any, Callable, Iterable, MutableSequence, Optional, Tuple, TypeVar, Generic, Iterator


def recursive_repr(fillvalue: str = ...): ...
T = TypeVar('T', covariant=True)

class SortedList(MutableSequence[T], Generic[T]):
    DEFAULT_LOAD_FACTOR: int = ...
    def __init__(self, iterable: Iterable[T]=..., key: None=...) -> None: ...
    def __new__(cls: Any, iterable: Iterable[T]=..., key: Callable[[T], Any]=...) -> SortedList[T]: ...
    @property
    def key(self) -> Optional[Callable[[T], Any]]: ...
    def clear(self) -> None: ...
    def add(self, value) -> None: ...
    def update(self, iterable: Iterable[T]) -> Any: ...
    def __contains__(self, value) -> bool: ...
    def discard(self, value) -> None: ...
    def remove(self, value) -> None: ...
    def __delitem__(self, index: Any): ...
    def __getitem__(self, index: Any): ...
    def __setitem__(self, index: Any, value: Any) -> None: ...
    def __iter__(self) -> Iterator[T]: ...
    def __reversed__(self) -> Iterator[T]: ...
    def reverse(self) -> None: ...
    def islice(self, start: int=..., stop: int=..., reverse: bool=...) -> Iterable[T]: ...
    def irange(self, minimum=..., maximum=..., inclusive: Tuple[bool, bool]=..., reverse: bool=...) -> Any: ...
    def __len__(self) -> int: ...
    def bisect_left(self, value) -> int: ...
    def bisect_right(self, value) -> int: ...
    def bisect(self, value) -> int: ...
    def count(self, value) -> int: ...
    def copy(self) -> SortedList[T]: ...
    def __copy__(self) -> SortedList[T]: ...
    def append(self, value: Any) -> None: ...
    def extend(self, values: Any) -> None: ...
    def insert(self, index: Any, value: Any) -> None: ...
    def pop(self, index: int=...) -> T: ...
    def index(self, value: Any, start: int=..., stop: int=...) -> int: ...
    def __add__(self, other: SortedList[T]) -> SortedList[T]: ...
    def __radd__(self, other: SortedList[T]) -> SortedList[T]: ...
    def __iadd__(self, other: Iterable[T])-> SortedList[T]: ...
    def __mul__(self, num: int) -> SortedList[T]: ...
    def __rmul__(self, num: int) -> SortedList[T]: ...
    def __imul__(self, num: int) -> SortedList[T]: ...
    def __eq__(self, other)-> bool: ...
    def __ne__(self, other)-> bool: ...
    def __lt__(self, other)-> bool: ...
    def __gt__(self, other)-> bool: ...
    def __le__(self, other)-> bool: ...
    def __ge__(self, other)-> bool: ...
    def __reduce__(self): ...

def identity(value: Any) -> T: ...

class SortedKeyList(SortedList[T], Generic[T]):
    def __init__(self, iterable: Iterable[T]=..., key: Callable[[T], Any]=...) -> None: ...
    def __new__(cls: Any, iterable: Iterable[T]=..., key: Callable[[T], Any]=...) -> Any: ...
    @property
    def key(self) -> Callable[[T], Any]: ...
    def clear(self) -> None: ...
    def add(self, value) -> None: ...
    def update(self, iterable: Iterable[T]) -> None: ...
    def __contains__(self, value) -> bool: ...
    def discard(self, value) -> None: ...
    def remove(self, value) -> None: ...
    def irange(self, minimum=..., maximum=..., inclusive: Tuple[bool, bool]=..., reverse: bool=...) -> Any: ...
    def irange_key(self, min_key= ..., max_key = ..., inclusive: Tuple[bool, bool] = (True, True), reverse: bool = False): ...
    def bisect_left(self, value) -> int: ...
    def bisect_right(self, value) -> int: ...
    def bisect(self, value) -> int: ...
    def bisect_key_left(self, key: Any) -> int: ...
    def bisect_key_right(self, key: Any) -> int: ...
    def bisect_key(self, key: Any) -> int: ...
    def count(self, value) -> int: ...
    def copy(self) -> SortedList[T]: ...
    def __copy__(self) -> SortedList[T]: ...
    def index(self, value, start: int=..., stop: int=...) -> Any: ...
    def __add__(self, other: Iterable[T]) -> Any: ...
    def __radd__(self, other: Iterable[T]) -> Any: ...
    def __mul__(self, num: int) -> SortedKeyList[T]: ...
    def __reduce__(self): ...
SortedListWithKey = SortedKeyList
